@charset 'UTF-8';
@use 'asterix';

@mixin asterix() {
  /* Initialize css3 core variables */
  // Placeholder for layout.
  %init-layout-vars {
    // Number of columns set in a layout scope.
    --columns: 1;
    // Gap between columns set in a layout scope.
    --hgap: unset;
    --vgap: unset;

    // Number of columns spaning set in a layout item scope.
    --span: 1;

    // Layout properties.
    --flow: unset;
    --display: unset;
    --justify-content: unset;
    --align-items: unset;
    --align-self: unset;
  }
  // Placeholder for flex.
  %init-flex-vars {
    // Flex variables.
    --wrap: unset;
    --direction: unset;
    --flex: none;
  }
  // Initialize css variables into proper scopes.
  #{if(--conf(scope-vars-in-each-layout), "[data-layout]", "&")} {
    @extend %init-layout-vars;
  }
  #{if(--conf(scope-vars-in-each-layout), "[data-flex]", "&")} {
    @extend %init-flex-vars;
  }

  /* Building builtins specifiers */
  // Basic
  @include asterix.build(
    0,
    (
      grid-columns-number: --conf(grid-columns-number),
      gaps: --var(gaps),
    )
  );
  // & for each breakpoint.
  @each $breakpoint, $value in --var(breakpoints) {
    @include --mq($breakpoint) {
      @include asterix.build(
        $breakpoint,
        (
          grid-columns-number: --conf(grid-columns-number),
          gaps: --var(gaps),
        )
      );
    }
  }

  /* Setting css properties */
  [data-layout] {
    display: var(--display);
    justify-content: var(--justify-content);
    align-items: var(--align-items);
    align-self: var(--align-self);
    // Auto-sizing for grid & flex.
    &[data-layout*='--auto'] {
      &[data-layout*='--grid'] {
        grid-auto-flow: var(--flow);
      }
      &[data-layout*='--flex'] {
        > * {
          flex: var(--flex);
        }
      }
    }
  }

  [data-flex] {
    flex-wrap: var(--wrap);
    flex-direction: var(--direction);
    flex: var(--flex);
  }

  [data-cols] {
    grid-template-columns: repeat(var(--columns), 1fr);
  }

  [data-col] {
    grid-column: span var(--span);
  }

  [data-gap] {
    column-gap: var(--hgap);
    row-gap: var(--vgap);
  }

  [data-hgap] {
    column-gap: var(--hgap);
  }

  [data-vgap] {
    row-gap: var(--vgap);
  }
}
