@charset 'UTF-8';
@use 'asterix';

// Placeholder setting default layout css vars.
%init-layout-vars {
  // Number of columns set in a layout scope.
  --#{--conf(id)}columns: 1;
  // Gap between columns set in a layout scope.
  --#{--conf(id)}hgap: unset;
  --#{--conf(id)}vgap: unset;

  // Number of columns spaning set in a layout item scope.
  --#{--conf(id)}span: 1;

  // Layout properties.
  --#{--conf(id)}flow: unset;
  --#{--conf(id)}display: unset;
  --#{--conf(id)}justify-content: unset;
  --#{--conf(id)}align-items: unset;
  --#{--conf(id)}align-self: unset;
}
// Placeholder setting default flex css vars.
%init-flex-vars {
  // Flex variables.
  --#{--conf(id)}wrap: unset;
  --#{--conf(id)}direction: unset;
  --#{--conf(id)}flex: none;
}

@mixin asterix() {
  $id: --conf(id);

  // Initialize css variables into proper scopes.
  #{if(--conf(scope-vars-in-each-layout), "[data-#{$id}layout]", "body")} {
    @extend %init-layout-vars;
  }
  #{if(--conf(scope-vars-in-each-layout), "[data-#{$id}flex]", "body")} {
    @extend %init-flex-vars;
  }

  @include asterix.build(
    0,
    (
      id: --conf(id),
      grid-columns-number: --conf(grid-columns-number),
      gaps: --var(gaps),
    )
  );
  /* The loop... creates all required selectors for each breakpoint */
  @each $breakpoint, $value in --var(breakpoints) {
    @include --mq($breakpoint) {
      @include asterix.build(
        $breakpoint,
        (
          id: --conf(id),
          grid-columns-number: --conf(grid-columns-number),
          gaps: --var(gaps),
        )
      );
    }
  }

  [data-#{$id}layout] {
    display: var(--#{$id}display);
    justify-content: var(--#{$id}justify-content);
    align-items: var(--#{$id}align-items);
    align-self: var(--#{$id}align-self);
    // Auto-sizing for grid & flex.
    &[data-#{$id}layout*='--auto'] {
      &[data-#{$id}layout*='--grid'] {
        grid-auto-flow: var(--#{$id}flow);
      }
      &[data-#{$id}layout*='--flex'] {
        > * {
          flex: var(--#{$id}flex);
        }
      }
    }
  }

  [data-#{$id}flex] {
    flex-wrap: var(--#{$id}wrap);
    flex-direction: var(--#{$id}direction);
    flex: var(--#{$id}flex);
  }

  [data-#{$id}cols] {
    grid-template-columns: repeat(var(--#{$id}columns), 1fr);
  }

  [data-#{$id}col] {
    grid-column: span var(--#{$id}span);
  }

  [data-#{$id}gap] {
    column-gap: var(--#{$id}hgap);
    row-gap: var(--#{$id}vgap);
  }

  [data-#{$id}hgap] {
    column-gap: var(--#{$id}hgap);
  }

  [data-#{$id}vgap] {
    row-gap: var(--#{$id}vgap);
  }
}
